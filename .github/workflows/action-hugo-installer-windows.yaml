name: Hugo Check and Install (Windows)

on:
  push:
    branches:
      - mainx
  workflow_dispatch:
  # Uncomment the following lines if you want to add pull request triggers
  # pull_request:
  #   types: [opened, synchronize, reopened, closed]
  #   branches:
  #     - main

jobs:
  check-and-install:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Operating System
        shell: pwsh
        run: |
          Write-Host "Operating System: Windows"
          systeminfo | Select-String -Pattern "OS Name|OS Version" | Write-Output

      - name: Get latest Hugo version
        id: get_latest_version
        shell: pwsh
        run: |
          $latestVersion = (Invoke-RestMethod -Uri "https://api.github.com/repos/gohugoio/hugo/releases/latest").tag_name
          Write-Output "Latest Hugo version is $latestVersion"
          echo "version=$latestVersion" >> $env:GITHUB_ENV

      - name: Download and Install Hugo
        shell: pwsh
        run: |
          function Decrement-Version {
              param ([string]$Version)
              $MajorMinor = $Version -replace '\.\d+$'  # Extract major and minor (e.g., v1.139)
              $Patch = $Version -replace '^.*\.'       # Extract patch number (e.g., 5)
              $NewPatch = [int]$Patch - 1              # Decrement patch number
              return "$MajorMinor.$NewPatch"           # Return decremented version with 'v' intact
          }

          $hugoVersion = $env:version
          $hugoVersionTrimmed = $hugoVersion.TrimStart('v')
          $downloadUrl = "https://github.com/gohugoio/hugo/releases/download/$hugoVersion/hugo_extended_${hugoVersionTrimmed}_windows-amd64.zip"
          $attempts = 0
          $maxAttempts = 5
          $downloadSuccess = $false

          while (-not $downloadSuccess -and $attempts -lt $maxAttempts) {
              try {
                  Write-Output "Downloading: Hugo $hugoVersion"
                  Write-Output "Download URL: $downloadUrl"
                  Invoke-WebRequest -Method 'Get' -Uri $downloadUrl -OutFile "hugo_extended_${hugoVersionTrimmed}_windows-amd64.zip"
                  $downloadSuccess = $true  # Set success flag if download succeeds
              } catch {
                  Write-Host "Error downloading Hugo: $_"
                  if ($attempts -lt $maxAttempts - 1) {
                      $hugoVersionTrimmed = Decrement-Version -Version $hugoVersionTrimmed
                      $hugoVersion = "v$hugoVersionTrimmed"
                      $downloadUrl = "https://github.com/gohugoio/hugo/releases/download/$hugoVersion/hugo_extended_${hugoVersionTrimmed}_windows-amd64.zip"
                      $attempts++
                      Write-Output "Attempting Hugo version $hugoVersion"
                  } else {
                      Write-Host "Max attempts reached. Download failed."
                      exit 1
                  }
              }
          }

          Write-Host "Extracting Hugo for Windows"
          Expand-Archive -Path "hugo_extended_${hugoVersionTrimmed}_windows-amd64.zip" -DestinationPath '.' -Force
          Move-Item -Path ".\hugo.exe" -Destination "C:\ProgramData\chocolatey\bin\" -Force

      - name: Check Hugo version
        shell: pwsh
        run: hugo version
