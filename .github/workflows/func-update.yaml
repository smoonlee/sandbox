name: Update Get-EolInfo Product List

on:
  schedule:
    - cron: '0 0 1 * *' # Runs at 00:00 UTC on the 1st of each month
  workflow_dispatch: # Allows manual triggering

jobs:
  update-product-list:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Fetch product list and update Get-EolInfo function
      - name: Update Get-EolInfo ValidateSet
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.DEV_TOKEN }}
        run: |
            # Fetch product list from endoflife.date API
            Write-Output "Fetching products from endoflife.date API..."
            $products = $(Invoke-RestMethod -Uri 'https://endoflife.date/api/v1/products/' -Method Get -TimeoutSec 10 -ErrorAction Stop).result
            if ($products) {
              Write-Output "Retrieved $($products.Count) products"
              # Format and sort product names for ValidateSet
              $productList = ($products | Select-Object -ExpandProperty name | Sort-Object) -join ","
              Write-Output "Product list: $productList"
            } else {
              Write-Warning "No products returned from API."
              exit 0 # Exit without failure to avoid unnecessary PRs
            }

            # Read the profile script
            $profilePath = 'Microsoft.PowerShell_profile.ps1'
            if (-not (Test-Path $profilePath)) {
              throw "Profile script not found at $profilePath"
            }
            $scriptContent = Get-Content -Path $profilePath -Raw -Encoding UTF8

            # Update the ValidateSet for the Get-EolInfo function
            $validateSetPattern = '\[ValidateSet\([^\)]*\)\]\s*\[string\]\$productName'
            $newValidateSet = "[ValidateSet($productList)][string]`$productName"
            $updatedContent = $scriptContent -replace $validateSetPattern, $newValidateSet

            if ($updatedContent -eq $scriptContent) {
              Write-Output "No changes to ValidateSet needed."
              exit 0 # No changes, so no PR
            }

            # Write updated content
            Set-Content -Path $profilePath -Value $updatedContent -Encoding UTF8
            Write-Output `r "Updated ValidateSet for Get-EolInfo in $profilePath"

      - name: Upload File
        shell: bash
        run: | 
          git config user.name 'github-actions[bot]'
              git config user.email 'github-actions[bot]@users.noreply.github.com'
              branch_name='update-eol-products-$(date +%Y%m%d)'
              git checkout -b \$branch_name || { echo 'Failed to create branch'; exit 1; }
              git add '$profilePath' || { echo 'Failed to add file'; exit 1; }
              git commit -m 'Update Get-EolInfo ValidateSet with latest endoflife.date products' || { echo 'Failed to commit'; exit 1; }
              git push origin \$branch_name || { echo 'Failed to push branch'; exit 1; }
              pr_body='Updated Get-EolInfo ValidateSet with $products.Count products from endoflife.date API on $(date +%Y-%m-%d).'
              gh pr create --title 'Update Get-EolInfo with latest endoflife.date products' --body \"\$pr_body\" --base main --head \$branch_name || { echo 'Failed to create PR'; exit 1; }
              echo 'Created PR for branch \$branch_name'
